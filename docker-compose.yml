services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      PORT: ${APP_PORT:-8080}
      RESERVATION_TIMEOUT: ${RESERVATION_TIMEOUT:-600}
      PG_USER: ${PG_USER:-postgres}
      PG_PASSWORD: ${PG_PASSWORD:-postgres}
      PG_HOST: postgres
      PG_PORT: ${PG_PORT:-5432}
      PG_DB: ${PG_DB:-sales}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sales-network

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${PG_USER:-postgres}
      POSTGRES_PASSWORD: ${PG_PASSWORD:-postgres}
      POSTGRES_DB: ${PG_DB:-sales}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - sales-network

  redis:
    image: redis:7-alpine
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - redisdata:/data
    networks:
      - sales-network

volumes:
  pgdata:
  redisdata:

networks:
  sales-network:
    driver: bridge